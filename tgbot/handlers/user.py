from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm import state
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from tgbot.services.db import all_text
from tgbot.keyboards.reply import start_keyboard, support_keyboard, back_keyboard
from tgbot.keyboards.inline import faq_keyboard
from tgbot.states import fsm


user_router = Router()


@user_router.message(CommandStart(), StateFilter(None))
async def user_start(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id, text=all_text["start_text"], reply_markup=start_keyboard)


@user_router.message(F.text=="‚ùì –ù–∞–π—á–∞—Å—Ç—ñ—à—ñ –ø–∏—Ç–∞–Ω–Ω—è")
async def user_stop(message: Message, bot:Bot):
    await bot.send_message(message.from_user.id, text="–©–æ –≤–∞–º –ø—ñ–¥–∫–∞–∑–∞—Ç–∏?", reply_markup=faq_keyboard)


@user_router.message(F.text=="üë≠–°—Ç—É–¥. –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó")
async def stud_org(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id, text=all_text["stud_orgs_text"])


@user_router.message(F.text=="üîó–ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
async def help_links(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id, text=all_text["help_links_text"])


@user_router.message(F.text=="üôã –ê–Ω–æ–Ω—ñ–º–Ω–∏–π —á–∞—Ç")
async def anon_chat(message: Message, bot: Bot):
    await bot.send_message(message.from_user.id, text="123")


@user_router.message(Command("chat"))
async def chat_test(message: Message, bot:Bot, state: FSMContext):
    await bot.send_message(message.from_user.id, text="–û–±–µ—Ä–∏ —â–æ —Å–∞–º–µ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ üëá", reply_markup=support_keyboard)
    await state.set_state(fsm.Choose_support)


@user_router.message(StateFilter(fsm.Choose_support))
async def supp_choose_handle(message: Message, bot:Bot, state: FSMContext):
    if message.text.__contains__("—á–∞—Ç"):
        await state.set_state(fsm.Chat)
        await bot.send_message(message.from_user.id, text="–û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –ø—ñ–¥'—î–¥–Ω–∞–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=ReplyKeyboardRemove())
    elif message.text.__contains__("—Å–∫–∞—Ä–≥–∞"):
        await state.set_state(fsm.Scarga)
        await bot.send_message(message.from_user.id, text='–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à—É —Å–∫–∞—Ä–≥—É –û–î–ù–ò–ú –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø–ú üëá\n–Ø–∫—â–æ –≤–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –≤–∏–ø–∞–¥–∫–æ–≤–æ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"', reply_markup=back_keyboard)

    elif message.text.__contains__("–ù–∞–∑–∞–¥"):
        await state.set_state(None)
        await bot.send_message(message.from_user.id, text=all_text["start_text"], reply_markup=start_keyboard)


@user_router.message(StateFilter(fsm.Scarga))
async def scarga_handler(message: Message, bot: Bot, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è":
        await bot.send_message(message.from_user.id, text="–û–±–µ—Ä–∏ —â–æ —Å–∞–º–µ —Ç–∏ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏ üëá",
                               reply_markup=support_keyboard)
        await state.set_state(fsm.Choose_support)
    else:
        await bot.send_message(-4265874588, text=f"–ù–æ–≤–∞ —Å–∫–∞—Ä–≥–∞! –á—ó —Ç–µ–∫—Å—Ç:\n{message.text}")
        await state.set_state(None)
        await bot.send_message(message.from_user.id, text="–ú–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –≤–∞—à—É —Å–∫–∞—Ä–≥—É, –¥—è–∫—É—î–º–æ –∑–∞ —Ñ—ñ–¥–±–µ–∫!\n", reply_markup=start_keyboard)


@user_router.callback_query(F.data == "?decanat")
async def callback_dekanat(callback: CallbackQuery, bot: Bot):
    await bot.send_message(callback.from_user.id, text=all_text["info_decanat_text"])


@user_router.callback_query(F.data == "?zam_dekan")
async def callback_zam_dekan(callback: CallbackQuery, bot: Bot):
    await bot.send_message(callback.from_user.id, text=all_text["zastup_info_text"])


@user_router.callback_query(F.data == "?timetable_dekan")
async def callback_dekan_time(callback: CallbackQuery, bot: Bot):
    await bot.send_message(callback.from_user.id, text=all_text["decan_time_text"])


@user_router.callback_query(F.data == "?study_pay")
async def callback_study_pay(callback: CallbackQuery, bot: Bot):
    await bot.send_message(callback.from_user.id, text=all_text["pay_req_text"])


@user_router.callback_query(F.data == "?hurt_pay")
async def callback_hurt_pay(callback: CallbackQuery, bot: Bot):
    await bot.send_message(callback.from_user.id, text=all_text["hurt_req_text"])


@user_router.callback_query(F.data)
async def callback_query(callback: CallbackQuery, bot:Bot):
    await bot.send_message(callback.from_user.id, text="123")